// NOTE: The following code was generated by "gen/generate-derived-props.js",
//       do not edit directly!

/* eslint-disable no-bitwise */
/* eslint-disable @typescript-eslint/no-use-before-define */

function check(
    x: number,
    singletonUppers: Uint16Array,
    singletonLowers: Uint8Array,
    normal: Uint8Array,
): boolean {
    const xUpper = x >> 8;
    const xLower = x & 0xff;

    let lowerStart = 0;

    let n;
    let upper;
    let lower;
    let lowerCount;
    let lowerEnd;

    // Test all the singletons first
    for (n of singletonUppers) {
        upper = n >> 8;
        lowerCount = n & 0xff;

        lowerEnd = lowerStart + lowerCount;

        if (xUpper === upper) {
            for (lower of singletonLowers.subarray(lowerStart, lowerEnd)) {
                if (xLower === lower) {
                    return false;
                }
            }
        } else if (xUpper < upper) {
            break;
        }

        lowerStart = lowerEnd;
    }

    let passing = false;
    let v = 0;
    let c = x;

    // Test all the normal ranges, assuming no range is 0 in length
    for (n of normal) {
        if ((v & 0x8000) !== 0) {
            v |= n;

            c -= v & ~0x8000;
            if (c < 0) {
                break;
            }

            v = 0;

            passing = !passing;
        } else if ((n & 0x80) !== 0) {
            v = (n & 0xff) << 8;
        } else {
            c -= n;
            if (c < 0) {
                break;
            }

            passing = !passing;
        }
    }

    return passing;
}

export default function isGraphemeExtend(x: number): boolean {
    const lower = x & 0xffff;

    if (x < 0x10000) {
        return check(lower, SINGLETONS0U, SINGLETONS0L, NORMAL0);
    }

    if (x < 0x20000) {
        return check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1);
    }

    if (x >= 0xe0020 && x < 0xe0080) {
        return false;
    }
    if (x >= 0xe0100 && x < 0xe01f0) {
        return false;
    }

    return true;
}

const SINGLETONS0U = Uint16Array.from([
    0x0402,
    0x0506,
    0x0603,
    0x0702,
    0x090d,
    0x0a13,
    0x0b0f,
    0x0c11,
    0x0d0e,
    0x0e02,
    0x0f08,
    0x100b,
    0x1708,
    0x1803,
    0x1903,
    0x1a0a,
    0x1b0c,
    0x1c06,
    0x2002,
    0x2d01,
    0x3004,
    0xa605,
    0xa809,
    0xa904,
    0xaa10,
    0xab03,
    0xfb01,
    0xff02,
]);
const SINGLETONS0L = Uint8Array.from([
    0x88, 0x89, 0xbf, 0xc1, 0xc2, 0xc4, 0xc5, 0xc7,
    0x70, 0xe7, 0xe8, 0x11, 0xfd, 0x3a, 0x3c, 0x4d,
    0x62, 0x63, 0x81, 0xbc, 0xbe, 0xcd, 0xd7, 0xe2,
    0xe3, 0xfe, 0x01, 0x02, 0x3c, 0x41, 0x42, 0x47,
    0x48, 0x51, 0x70, 0x71, 0x75, 0x81, 0x82, 0xbc,
    0xc7, 0xc8, 0xcd, 0xe2, 0xe3, 0x01, 0x3c, 0x3e,
    0x3f, 0x4d, 0x55, 0x56, 0x57, 0x62, 0x63, 0x82,
    0xbe, 0xc0, 0xcd, 0xd7, 0x00, 0x04, 0x55, 0x56,
    0x62, 0x63, 0x81, 0xbc, 0xbf, 0xc2, 0xc6, 0xcc,
    0xcd, 0xd5, 0xd6, 0xe2, 0xe3, 0x00, 0x01, 0x3b,
    0x3c, 0x3e, 0x4d, 0x57, 0x62, 0x63, 0x81, 0xca,
    0xcf, 0xd6, 0xdf, 0x31, 0xb1, 0x18, 0x19, 0x35,
    0x37, 0x39, 0x86, 0x87, 0xc6, 0x39, 0x3a, 0x3d,
    0x3e, 0x58, 0x59, 0x82, 0x85, 0x86, 0x8d, 0x9d,
    0x52, 0x53, 0x72, 0x73, 0xb4, 0xb5, 0xc6, 0xdd,
    0x85, 0x86, 0xa9, 0x27, 0x28, 0x32, 0x17, 0x18,
    0x1b, 0x56, 0x60, 0x62, 0x7f, 0xbe, 0xbf, 0xc0,
    0x34, 0x35, 0x3c, 0x42, 0x80, 0x81, 0xa8, 0xa9,
    0xe6, 0xe8, 0xe9, 0xed, 0x36, 0x37, 0xed, 0xf4,
    0xf8, 0xf9, 0x0c, 0xe1, 0x7f, 0x2e, 0x2f, 0x99,
    0x9a, 0x6f, 0x9e, 0x9f, 0xf0, 0xf1, 0x02, 0x06,
    0x0b, 0x25, 0x26, 0x2c, 0xc4, 0xc5, 0xff, 0xb3,
    0xbc, 0xbd, 0xe5, 0x31, 0x32, 0x35, 0x36, 0x43,
    0x4c, 0x7c, 0xb0, 0xb7, 0xb8, 0xbe, 0xbf, 0xc1,
    0xec, 0xed, 0xf6, 0xe5, 0xe8, 0xed, 0x1e, 0x9e,
    0x9f,
]);

const SINGLETONS1U = Uint16Array.from([
    0x0101,
    0x0201,
    0x0a05,
    0x0e02,
    0x1003,
    0x1104,
    0x1205,
    0x1307,
    0x1409,
    0x1507,
    0x1606,
    0x1802,
    0x1908,
    0x1a03,
    0x1c05,
    0x1d08,
    0x1e02,
    0x6f02,
    0xbc02,
    0xd101,
    0xda02,
    0xe002,
]);
const SINGLETONS1L = Uint8Array.from([
    0xfd, 0xe0, 0x05, 0x06, 0x3f, 0xe5, 0xe6, 0xab,
    0xac, 0x01, 0xb9, 0xba, 0x73, 0x80, 0x81, 0xcf,
    0x34, 0x36, 0x37, 0x3e, 0xdf, 0x00, 0x01, 0x3b,
    0x3c, 0x3e, 0x40, 0x57, 0x46, 0x5e, 0xb0, 0xba,
    0xbd, 0xbf, 0xc0, 0xc2, 0xc3, 0xaf, 0xbc, 0xbd,
    0xbf, 0xc0, 0xdc, 0xdd, 0x3d, 0x3f, 0x40, 0xab,
    0xad, 0xb7, 0x39, 0x3a, 0x30, 0x3b, 0x3c, 0x3e,
    0x43, 0xda, 0xdb, 0xe0, 0x47, 0x98, 0x99, 0x3f,
    0xb2, 0xb3, 0xb5, 0xb6, 0x3a, 0x3c, 0x3d, 0x47,
    0x90, 0x91, 0x95, 0x97, 0xf3, 0xf4, 0x4f, 0xe4,
    0x9d, 0x9e, 0x65, 0x75, 0x84, 0x23, 0x24,
]);

const NORMAL0 = Uint8Array.from([
    0x83, 0x00, 0x70,
    0x81, 0x13, 0x05,
    0x81, 0x09, 0x2d,
    0x52, 0x0b,
    0x30, 0x15,
    0x76, 0x07,
    0x02, 0x06,
    0x05, 0x04,
    0x42, 0x1b,
    0x5b, 0x0b,
    0x3a, 0x09,
    0x22, 0x04,
    0x01, 0x09,
    0x01, 0x03,
    0x01, 0x05,
    0x2b, 0x03,
    0x77, 0x0f,
    0x01, 0x20,
    0x3e, 0x08,
    0x08, 0x07,
    0x69, 0x04,
    0x80, 0x86, 0x03,
    0x73, 0x05,
    0x34, 0x06,
    0x41, 0x04,
    0x80, 0xf9, 0x03,
    0x05, 0x03,
    0x01, 0x04,
    0x80, 0xf3, 0x04,
    0x80, 0x8d, 0x03,
    0x5f, 0x07,
    0x0c, 0x08,
    0x65, 0x09,
    0x0b, 0x06,
    0x80, 0xa3, 0x0e,
    0x01, 0x05,
    0x08, 0x0b,
    0x01, 0x24,
    0x70, 0x04,
    0x01, 0x06,
    0x26, 0x03,
    0x10, 0x04,
    0x82, 0xe8, 0x03,
    0x83, 0xb2, 0x03,
    0x1d, 0x03,
    0x80, 0x82, 0x07,
    0x0b, 0x0b,
    0x37, 0x03,
    0x81, 0x12, 0x03,
    0x16, 0x03,
    0x81, 0x1c, 0x07,
    0x06, 0x08,
    0x06, 0x0a,
    0x33, 0x0e,
    0x42, 0x04,
    0x32, 0x05,
    0x30, 0x09,
    0x2e, 0x04,
    0x05, 0x03,
    0x41, 0x03,
    0x3a, 0x08,
    0x80, 0x9c, 0x03,
    0x01, 0x0d,
    0x01, 0x07,
    0x80, 0xd7, 0x3a,
    0x01, 0x05,
    0x82, 0xd0, 0x0d,
    0x00, 0x04,
    0x01, 0x03,
    0x00, 0x0c,
    0x8b, 0xfe, 0x03,
    0x80, 0xee, 0x20,
    0x82, 0x2a, 0x04,
    0xf6, 0x42, 0x03,
    0x01, 0x0a,
    0x82, 0x62, 0x12,
    0x34, 0x08,
    0x19, 0x0b,
    0x2e, 0x03,
    0x33, 0x04,
    0x6f, 0x06,
    0x80, 0x83, 0x03,
    0xd3, 0x4b, 0x10,
    0x10, 0x10,
]);

const NORMAL1 = Uint8Array.from([
    0x83, 0x76, 0x05,
    0x86, 0x86, 0x03,
    0x08, 0x04,
    0x28, 0x03,
    0x82, 0xe9, 0x04,
    0x82, 0x1e, 0x0b,
    0x80, 0xe7, 0x0f,
    0x38, 0x03,
    0x31, 0x04,
    0x49, 0x03,
    0x24, 0x05,
    0x01, 0x08,
    0x80, 0x81, 0x09,
    0x0a, 0x04,
    0x62, 0x03,
    0x80, 0xb1, 0x08,
    0x7b, 0x07,
    0x03, 0x05,
    0x80, 0xc3, 0x08,
    0x02, 0x03,
    0x6e, 0x06,
    0x80, 0xf9, 0x04,
    0x7d, 0x08,
    0x75, 0x06,
    0x67, 0x03,
    0x02, 0x04,
    0x01, 0x05,
    0x81, 0x03, 0x09,
    0x81, 0x9c, 0x04,
    0x29, 0x0a,
    0x28, 0x06,
    0x02, 0x04,
    0x12, 0x06,
    0x02, 0x03,
    0x2e, 0x0d,
    0x81, 0x99, 0x07,
    0x01, 0x06,
    0x54, 0x16,
    0x02, 0x07,
    0x80, 0x80, 0x06,
    0x08, 0x07,
    0xcd, 0xaa, 0x05,
    0x3b, 0x07,
    0x84, 0x58, 0x04,
    0xe1, 0xd4, 0x03,
    0x04, 0x05,
    0x08, 0x08,
    0x02, 0x07,
    0x1e, 0x04,
    0x80, 0x94, 0x03,
    0x87, 0xbb, 0x37,
    0x04, 0x32,
    0x2e, 0x05,
    0x01, 0x0f,
    0x85, 0x50, 0x07,
    0x01, 0x11,
    0x02, 0x07,
    0x04, 0x05,
    0x81, 0x05, 0x07,
    0x81, 0xb5, 0x04,
    0x85, 0xe0, 0x07,
    0x6d, 0x07,
]);

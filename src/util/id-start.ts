// NOTE: The following code was generated by "gen/generate-derived-props.js",
//       do not edit directly!

/* eslint-disable no-bitwise */
/* eslint-disable @typescript-eslint/no-use-before-define */

function check(
    x: number,
    singletonUppers: Uint16Array,
    singletonLowers: Uint8Array,
    normal: Uint8Array,
): boolean {
    const xUpper = x >> 8;
    const xLower = x & 0xff;

    let lowerStart = 0;

    let n;
    let upper;
    let lower;
    let lowerCount;
    let lowerEnd;

    // Test all the singletons first
    for (n of singletonUppers) {
        upper = n >> 8;
        lowerCount = n & 0xff;

        lowerEnd = lowerStart + lowerCount;

        if (xUpper === upper) {
            for (lower of singletonLowers.subarray(lowerStart, lowerEnd)) {
                if (xLower === lower) {
                    return false;
                }
            }
        } else if (xUpper < upper) {
            break;
        }

        lowerStart = lowerEnd;
    }

    let passing = false;
    let v = 0;
    let c = x;

    // Test all the normal ranges, assuming no range is 0 in length
    for (n of normal) {
        if ((v & 0x8000) !== 0) {
            v |= n;

            c -= v & ~0x8000;
            if (c < 0) {
                break;
            }

            v = 0;

            passing = !passing;
        } else if ((n & 0x80) !== 0) {
            v = (n & 0xff) << 8;
        } else {
            c -= n;
            if (c < 0) {
                break;
            }

            passing = !passing;
        }
    }

    return passing;
}

export default function isIdStart(x: number): boolean {
    const lower = x & 0xffff;

    if (x < 0x10000) {
        return check(lower, SINGLETONS0U, SINGLETONS0L, NORMAL0);
    }

    if (x < 0x20000) {
        return check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1);
    }

    if (x >= 0x20000 && x < 0x2a6de) {
        return false;
    }
    if (x >= 0x2a700 && x < 0x2b735) {
        return false;
    }
    if (x >= 0x2b740 && x < 0x2b81e) {
        return false;
    }
    if (x >= 0x2b820 && x < 0x2cea2) {
        return false;
    }
    if (x >= 0x2ceb0 && x < 0x2ebe1) {
        return false;
    }
    if (x >= 0x2f800 && x < 0x2fa1e) {
        return false;
    }
    if (x >= 0x30000 && x < 0x3134b) {
        return false;
    }

    return true;
}

const SINGLETONS0U = Uint16Array.from([
    0x0003,
    0x0101,
    0x0203,
    0x0307,
    0x0501,
    0x0609,
    0x0705,
    0x0803,
    0x090d,
    0x0a10,
    0x0b11,
    0x0c0a,
    0x0d03,
    0x0e0b,
    0x0f01,
    0x1008,
    0x1202,
    0x1702,
    0x1804,
    0x1a01,
    0x1b02,
    0x1c03,
    0x1d01,
    0x1f04,
    0x2002,
    0x210c,
    0x2c04,
    0x2d03,
    0x300b,
    0xa001,
    0xa607,
    0xa709,
    0xa803,
    0xa902,
    0xaa0d,
    0xab01,
    0xfb06,
    0xff03,
]);
const SINGLETONS0L = Uint8Array.from([
    0xaa, 0xb5, 0xba, 0xbb, 0x94, 0xec, 0xee, 0x74,
    0x76, 0x77, 0x7a, 0x7f, 0x86, 0x8c, 0x59, 0x40,
    0x6e, 0x6f, 0xd5, 0xe5, 0xe6, 0xee, 0xef, 0xff,
    0x10, 0xb1, 0xf4, 0xf5, 0xfa, 0x1a, 0x24, 0x28,
    0x3d, 0x50, 0x71, 0x8f, 0x90, 0xb2, 0xbd, 0xce,
    0xdc, 0xdd, 0xf0, 0xf1, 0xfc, 0x0f, 0x10, 0x32,
    0x33, 0x35, 0x36, 0x38, 0x39, 0x5e, 0xb2, 0xb3,
    0xbd, 0xd0, 0xe0, 0xe1, 0xf9, 0x0f, 0x10, 0x32,
    0x33, 0x3d, 0x5c, 0x5d, 0x71, 0x83, 0x99, 0x9a,
    0x9c, 0x9e, 0x9f, 0xa3, 0xa4, 0xd0, 0x3d, 0x60,
    0x61, 0x80, 0xbd, 0xde, 0xe0, 0xe1, 0xf1, 0xf2,
    0x3d, 0x4e, 0xbd, 0x32, 0x33, 0x46, 0x81, 0x82,
    0x84, 0xa5, 0xb2, 0xb3, 0xbd, 0xc6, 0x00, 0x3f,
    0x61, 0x65, 0x66, 0x8e, 0xc7, 0xcd, 0xfc, 0x58,
    0xc0, 0xd7, 0xdc, 0x43, 0x85, 0x86, 0xaa, 0xa7,
    0xae, 0xaf, 0xf5, 0xf6, 0xfa, 0x78, 0x59, 0x5b,
    0x5d, 0xbe, 0x71, 0x7f, 0x02, 0x07, 0x15, 0x18,
    0x24, 0x26, 0x28, 0x2e, 0x39, 0x4e, 0x83, 0x84,
    0x7c, 0x7d, 0xf2, 0xf3, 0x27, 0x2d, 0x6f, 0x05,
    0x06, 0x07, 0x3b, 0x3c, 0x9b, 0x9c, 0x9d, 0x9e,
    0x9f, 0xff, 0x15, 0x0c, 0x2a, 0x2b, 0x6e, 0x7f,
    0x9c, 0x9d, 0x70, 0x88, 0x8f, 0xf5, 0xf6, 0xf7,
    0xf8, 0xf9, 0xfa, 0xfb, 0xfd, 0xfe, 0xcf, 0xe6,
    0x70, 0x7a, 0xb1, 0xb5, 0xb6, 0xc0, 0xc2, 0xdb,
    0xdc, 0xdd, 0xf2, 0xf3, 0xf4, 0x69, 0x1d, 0x3e,
    0x40, 0x41, 0x43, 0x44, 0x70, 0x9e, 0x9f,
]);

const SINGLETONS1U = Uint16Array.from([
    0x0002,
    0x0302,
    0x0806,
    0x0902,
    0x0a01,
    0x0e02,
    0x0f01,
    0x1105,
    0x1201,
    0x1306,
    0x1403,
    0x1602,
    0x1907,
    0x1a04,
    0x1c01,
    0x1d06,
    0x1f01,
    0x6f04,
    0xd406,
    0xd501,
    0xe101,
    0xe901,
    0xee16,
]);
const SINGLETONS1L = Uint8Array.from([
    0x3c, 0x3d, 0x41, 0x4a, 0x08, 0x37, 0x38, 0x3c,
    0xf4, 0xf5, 0xbe, 0xbf, 0x00, 0xb0, 0xb1, 0x27,
    0x44, 0x47, 0x76, 0xda, 0xdc, 0x88, 0x0f, 0x10,
    0x32, 0x33, 0x3d, 0x50, 0xc4, 0xc5, 0xc7, 0x44,
    0xb8, 0x09, 0x15, 0x16, 0x3f, 0x41, 0xe1, 0xe3,
    0x00, 0x3a, 0x50, 0x9d, 0x40, 0x08, 0x09, 0x46,
    0x67, 0x68, 0x98, 0xb0, 0x50, 0xe0, 0xe1, 0xe3,
    0x9e, 0x9f, 0xa2, 0xa5, 0xa6, 0xbb, 0x46, 0x4e,
    0x4b, 0x21, 0x22, 0x24, 0x27, 0x39, 0x3b, 0x42,
    0x47, 0x49, 0x4b, 0x51, 0x52, 0x54, 0x57, 0x59,
    0x5b, 0x5d, 0x5f, 0x61, 0x62, 0x64, 0x7e,
]);

const NORMAL0 = Uint8Array.from([
    0x41, 0x1a,
    0x06, 0x1a,
    0x45, 0x17,
    0x01, 0x1f,
    0x01, 0x80, 0xc3,
    0x01, 0x04,
    0x00, 0x04,
    0x00, 0x80, 0xd0,
    0x01, 0x1b,
    0x00, 0x12,
    0x04, 0x0c,
    0x0e, 0x05,
    0x80, 0x8b, 0x04,
    0x07, 0x03,
    0x0a, 0x03,
    0x03, 0x14,
    0x01, 0x53,
    0x01, 0x80, 0x8b,
    0x08, 0x80, 0xa6,
    0x01, 0x26,
    0x09, 0x29,
    0x47, 0x1b,
    0x04, 0x04,
    0x2d, 0x20,
    0x01, 0x0a,
    0x26, 0x63,
    0x26, 0x03,
    0x15, 0x1e,
    0x1d, 0x59,
    0x24, 0x21,
    0x15, 0x16,
    0x2a, 0x19,
    0x07, 0x0b,
    0x35, 0x15,
    0x01, 0x12,
    0x3c, 0x36,
    0x1e, 0x0a,
    0x10, 0x0f,
    0x04, 0x08,
    0x06, 0x16,
    0x01, 0x07,
    0x05, 0x04,
    0x25, 0x03,
    0x23, 0x06,
    0x08, 0x16,
    0x01, 0x07,
    0x28, 0x04,
    0x15, 0x03,
    0x10, 0x09,
    0x01, 0x03,
    0x01, 0x16,
    0x01, 0x07,
    0x04, 0x05,
    0x4b, 0x08,
    0x06, 0x16,
    0x01, 0x07,
    0x04, 0x05,
    0x25, 0x03,
    0x23, 0x06,
    0x03, 0x03,
    0x01, 0x04,
    0x12, 0x03,
    0x03, 0x0c,
    0x4b, 0x08,
    0x01, 0x03,
    0x01, 0x17,
    0x01, 0x10,
    0x1e, 0x03,
    0x2a, 0x08,
    0x01, 0x03,
    0x01, 0x17,
    0x01, 0x0a,
    0x01, 0x05,
    0x4a, 0x09,
    0x01, 0x03,
    0x01, 0x29,
    0x19, 0x03,
    0x08, 0x03,
    0x18, 0x06,
    0x05, 0x12,
    0x03, 0x18,
    0x01, 0x09,
    0x04, 0x07,
    0x3a, 0x30,
    0x0f, 0x06,
    0x40, 0x05,
    0x01, 0x18,
    0x03, 0x0a,
    0x0f, 0x05,
    0x17, 0x04,
    0x60, 0x08,
    0x01, 0x24,
    0x1b, 0x05,
    0x73, 0x2b,
    0x25, 0x06,
    0x04, 0x04,
    0x10, 0x03,
    0x04, 0x0d,
    0x1e, 0x26,
    0x0a, 0x2b,
    0x02, 0x03,
    0x00, 0x81, 0x49,
    0x01, 0x04,
    0x02, 0x07,
    0x03, 0x04,
    0x02, 0x29,
    0x01, 0x04,
    0x02, 0x21,
    0x01, 0x04,
    0x02, 0x07,
    0x03, 0x04,
    0x02, 0x0f,
    0x01, 0x39,
    0x01, 0x04,
    0x02, 0x43,
    0x25, 0x10,
    0x10, 0x56,
    0x02, 0x06,
    0x03, 0x82, 0x6c,
    0x02, 0x11,
    0x01, 0x1a,
    0x05, 0x4b,
    0x03, 0x03,
    0x00, 0x08,
    0x07, 0x0d,
    0x01, 0x04,
    0x0e, 0x12,
    0x0e, 0x12,
    0x0e, 0x0d,
    0x01, 0x03,
    0x0f, 0x34,
    0x6c, 0x23,
    0x01, 0x35,
    0x07, 0x05,
    0x02, 0x22,
    0x07, 0x46,
    0x0a, 0x1f,
    0x31, 0x1e,
    0x02, 0x05,
    0x0b, 0x2c,
    0x04, 0x1a,
    0x36, 0x17,
    0x09, 0x35,
    0x80, 0xb0, 0x2f,
    0x11, 0x07,
    0x37, 0x1e,
    0x19, 0x2c,
    0x1a, 0x24,
    0x29, 0x03,
    0x0a, 0x1e,
    0x00, 0x06,
    0x02, 0x09,
    0x07, 0x2b,
    0x02, 0x03,
    0x29, 0x04,
    0x01, 0x06,
    0x0c, 0x2c,
    0x00, 0x3f,
    0x00, 0x0d,
    0x01, 0x22,
    0x00, 0x25,
    0x40, 0x81, 0x16,
    0x02, 0x06,
    0x02, 0x26,
    0x02, 0x06,
    0x02, 0x08,
    0x07, 0x1f,
    0x02, 0x35,
    0x01, 0x07,
    0x05, 0x03,
    0x01, 0x07,
    0x03, 0x04,
    0x02, 0x06,
    0x04, 0x0d,
    0x05, 0x03,
    0x01, 0x07,
    0x80, 0x93, 0x0d,
    0x6d, 0x0a,
    0x05, 0x05,
    0x0c, 0x04,
    0x01, 0x06,
    0x00, 0x04,
    0x03, 0x04,
    0x05, 0x05,
    0x16, 0x23,
    0x02, 0x04,
    0x8a, 0x77, 0x2f,
    0x01, 0x2f,
    0x01, 0x1c,
    0x02, 0x67,
    0x06, 0x04,
    0x11, 0x26,
    0x0a, 0x38,
    0x18, 0x17,
    0x09, 0x07,
    0x01, 0x07,
    0x01, 0x07,
    0x01, 0x07,
    0x01, 0x07,
    0x01, 0x07,
    0x01, 0x07,
    0x01, 0x07,
    0x82, 0x42, 0x09,
    0x07, 0x05,
    0x02, 0x03,
    0x06, 0x56,
    0x0a, 0x5a,
    0x01, 0x03,
    0x06, 0x2b,
    0x01, 0x5e,
    0x11, 0x20,
    0x30, 0x10,
    0x82, 0x00, 0x99, 0xc0,
    0x40, 0xd1, 0xfd,
    0x03, 0x15,
    0x01, 0x84, 0x77,
    0x43, 0x28,
    0x00, 0x06,
    0x02, 0x81, 0x0c,
    0x04, 0x10,
    0x20, 0x2e,
    0x12, 0x1c,
    0x04, 0x46,
    0x00, 0x0a,
    0x27, 0x09,
    0x02, 0x4e,
    0x01, 0x17,
    0x03, 0x04,
    0x01, 0x30,
    0x02, 0x09,
    0x30, 0x07,
    0x01, 0x03,
    0x01, 0x04,
    0x01, 0x17,
    0x1d, 0x34,
    0x0e, 0x32,
    0x3e, 0x06,
    0x12, 0x1c,
    0x0a, 0x17,
    0x19, 0x1d,
    0x07, 0x2f,
    0x2d, 0x05,
    0x02, 0x09,
    0x0a, 0x05,
    0x01, 0x29,
    0x17, 0x03,
    0x01, 0x08,
    0x14, 0x10,
    0x01, 0x06,
    0x07, 0x32,
    0x09, 0x05,
    0x22, 0x0b,
    0x16, 0x06,
    0x02, 0x06,
    0x02, 0x06,
    0x09, 0x07,
    0x01, 0x07,
    0x01, 0x2b,
    0x01, 0x04,
    0x00, 0x09,
    0x07, 0x50,
    0x00, 0x23,
    0x1d, 0xab, 0xa4,
    0x0c, 0x17,
    0x04, 0x31,
    0xa1, 0x04, 0x81, 0x6e,
    0x02, 0x6a,
    0x26, 0x07,
    0x0c, 0x05,
    0x07, 0x0a,
    0x01, 0x0d,
    0x01, 0x05,
    0x09, 0x6c,
    0x21, 0x81, 0x6b,
    0x12, 0x40,
    0x02, 0x36,
    0x28, 0x0c,
    0x74, 0x05,
    0x01, 0x80, 0x87,
    0x24, 0x1a,
    0x06, 0x1a,
    0x0b, 0x0a,
    0x01, 0x2d,
    0x02, 0x1f,
    0x03, 0x06,
    0x02, 0x06,
    0x02, 0x06,
    0x02, 0x03,
]);

const NORMAL1 = Uint8Array.from([
    0x00, 0x0c,
    0x01, 0x1a,
    0x01, 0x13,
    0x04, 0x0f,
    0x02, 0x0e,
    0x22, 0x7b,
    0x45, 0x35,
    0x81, 0x0b, 0x1d,
    0x03, 0x31,
    0x2f, 0x20,
    0x0d, 0x14,
    0x01, 0x08,
    0x06, 0x26,
    0x0a, 0x1e,
    0x02, 0x24,
    0x04, 0x08,
    0x01, 0x05,
    0x2a, 0x50,
    0x00, 0x4e,
    0x12, 0x24,
    0x04, 0x24,
    0x04, 0x28,
    0x08, 0x34,
    0x80, 0x9c, 0x81, 0x37,
    0x09, 0x16,
    0x0a, 0x08,
    0x80, 0x98, 0x06,
    0x04, 0x2c,
    0x09, 0x17,
    0x0a, 0x17,
    0x09, 0x1f,
    0x41, 0x13,
    0x0d, 0x16,
    0x0a, 0x1a,
    0x46, 0x38,
    0x58, 0x04,
    0x01, 0x03,
    0x01, 0x1d,
    0x2a, 0x1d,
    0x03, 0x1d,
    0x23, 0x08,
    0x01, 0x1c,
    0x1b, 0x36,
    0x0a, 0x16,
    0x0a, 0x13,
    0x0d, 0x12,
    0x6e, 0x49,
    0x37, 0x33,
    0x0d, 0x33,
    0x0d, 0x24,
    0x81, 0x5c, 0x2a,
    0x56, 0x1d,
    0x13, 0x16,
    0x6a, 0x15,
    0x1b, 0x17,
    0x0c, 0x35,
    0x4b, 0x2d,
    0x20, 0x19,
    0x1a, 0x24,
    0x29, 0x23,
    0x10, 0x30,
    0x0e, 0x04,
    0x3b, 0x12,
    0x01, 0x19,
    0x54, 0x07,
    0x03, 0x04,
    0x01, 0x0f,
    0x01, 0x0a,
    0x07, 0x2f,
    0x26, 0x08,
    0x06, 0x16,
    0x01, 0x07,
    0x04, 0x05,
    0x23, 0x05,
    0x80, 0x9e, 0x35,
    0x12, 0x04,
    0x14, 0x03,
    0x1e, 0x30,
    0x80, 0xd0, 0x2f,
    0x29, 0x04,
    0x24, 0x30,
    0x50, 0x2b,
    0x55, 0x1b,
    0x80, 0xe5, 0x2c,
    0x74, 0x40,
    0x1f, 0x08,
    0x05, 0x08,
    0x04, 0x18,
    0x70, 0x08,
    0x02, 0x27,
    0x3a, 0x28,
    0x29, 0x2e,
    0x36, 0x39,
    0x81, 0x07, 0x09,
    0x01, 0x25,
    0x43, 0x1e,
    0x70, 0x07,
    0x04, 0x26,
    0x2f, 0x06,
    0x04, 0x20,
    0x81, 0x56, 0x13,
    0x81, 0x0d, 0x83, 0x9a,
    0x66, 0x6f,
    0x11, 0x80, 0xc4,
    0x8a, 0xbc, 0x84, 0x2f,
    0x8f, 0xd1, 0x82, 0x47,
    0xa1, 0xb9, 0x82, 0x39,
    0x07, 0x1f,
    0x71, 0x1e,
    0x12, 0x30,
    0x10, 0x04,
    0x1f, 0x15,
    0x05, 0x13,
    0x82, 0xb0, 0x40,
    0x80, 0x80, 0x4b,
    0x48, 0x0d,
    0x60, 0x97, 0xf8,
    0x08, 0x84, 0xd6,
    0x2a, 0x09,
    0xa2, 0xf7, 0x81, 0x1f,
    0x31, 0x03,
    0x11, 0x04,
    0x08, 0x81, 0x8c,
    0x89, 0x04, 0x6b,
    0x05, 0x0d,
    0x03, 0x09,
    0x07, 0x0a,
    0x97, 0x66, 0x55,
    0x01, 0x47,
    0x0c, 0x04,
    0x01, 0x0c,
    0x03, 0x07,
    0x01, 0x41,
    0x01, 0x04,
    0x02, 0x08,
    0x01, 0x07,
    0x01, 0x1c,
    0x01, 0x04,
    0x01, 0x05,
    0x05, 0x07,
    0x01, 0x81, 0x54,
    0x02, 0x19,
    0x01, 0x19,
    0x01, 0x1f,
    0x01, 0x19,
    0x01, 0x1f,
    0x01, 0x19,
    0x01, 0x1f,
    0x01, 0x19,
    0x01, 0x1f,
    0x01, 0x19,
    0x01, 0x08,
    0x89, 0x34, 0x2d,
    0x0a, 0x07,
    0x81, 0x82, 0x2c,
    0x85, 0x14, 0x80, 0xc5,
    0x3b, 0x44,
    0x84, 0xbc, 0x04,
    0x01, 0x1b,
    0x09, 0x0a,
    0x01, 0x04,
    0x15, 0x03,
    0x17, 0x04,
    0x01, 0x07,
    0x01, 0x04,
    0x01, 0x04,
    0x03, 0x0a,
    0x01, 0x11,
    0x05, 0x03,
    0x01, 0x05,
    0x01, 0x11,
]);
